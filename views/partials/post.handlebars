{{! Partial for a single post }}
<div class="post">
    <div class="post-avatar">
        <!-- the user's avatar -->
        <img src="avatar/{{username}}" alt="{{username}}'s avatar" class="pfp-home"/>
    </div>
    <div class="post-content preserve-newlines">
        <!-- the post -->
            <h2>{{title}}</h2>
            <p>{{content}}</p>
        <hr>
        <div class="post-status-bar">
            <!-- everything that is shown in the status bar -->
            <!-- Heart = â™¥ -->
            <!-- font awesome  trashcan = <i class="fas fa-trash-alt"> </i>-->
            {{#ifCond user.username username}}
                <span>
                    <a href="#" onclick="handleDeleteClick(event)" data-id="{{id}}">ðŸ—‘</a>
                </span>
            {{else}}
                <span>
                    <a href="#" id="likeBtn" onclick="handleLikeClick(event)" data-id="{{id}}" data-currUser="{{user.username}}">â™¥</a>
                </span>
            {{/ifCond}}
            <div id="likeDiv">
                <span id="like-count">{{likes}}</span> <span> likes</span>
            </div>
            <small>Posted by {{username}} on {{timestamp}}</small>
        </div>        
    </div>
</div>
<script>

    function handleLikeClick(event) {
        event.preventDefault();
        const postId = event.target.getAttribute('data-id');
        const currUser = event.target.getAttribute('data-currUser');

        if (currUser === '') {
            console.error("Non-logged in users aren't able to like posts");
            return;
        }

        fetch(`/like/${postId}`, {
            method: 'POST',
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            const container = event.target.closest(".post");
            if (container) {
                const likeCountSpan = container.querySelector("#like-count");
                if (likeCountSpan) {
                    likeCountSpan.innerText = data.likes;
                }
            }

            // 
            const likeButton = event.target;
            if (data.liked) {
                likeButton.classList.add('liked');
            } else {
                likeButton.classList.remove('liked');
            }
        })
        .catch(error => {
            console.error('Error updating post likes:', error);
        });
    }

    function handleDeleteClick(event) {
        event.preventDefault();
        const postId = event.target.getAttribute('data-id'); 

        // you might want to "fetch" something...        
        fetch(`/delete/${postId}`, {
            method: 'POST',
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
        })
        .then(message => {
            console.log(message);
        })
        .catch(error => {
            console.error('Error deleting post:', error);
        });

        const postContainer = event.target.closest(".post");
        if (postContainer) {
            postContainer.style.display = 'none';
        }

    }    
</script>